# Task 1: Complex JOINs with Aggregation

SELECT o.order_id, 
       SUM(p.price * li.quantity) AS total_price
FROM orders o
JOIN line_items li ON o.order_id = li.order_id
JOIN products p ON li.product_id = p.product_id
GROUP BY o.order_id
ORDER BY o.order_id
LIMIT 5;

# task 2 SQL command

SELECT c.customer_name, 
       AVG(order_totals.total_price) AS average_total_price
FROM customers c
LEFT JOIN (
    SELECT o.customer_id, 
           SUM(p.price * li.quantity) AS total_price
    FROM orders o
    JOIN line_items li ON o.order_id = li.order_id
    JOIN products p ON li.product_id = p.product_id
    GROUP BY o.order_id
) AS order_totals ON c.customer_id = order_totals.customer_id
GROUP BY c.customer_id;

import sqlite3

def fetch_order_totals():
    # Connect to the SQLite database
    conn = sqlite3.connect('../db/lesson.db')
    cursor = conn.cursor()

    # Define the SQL query
    query = '''
    SELECT o.order_id, 
           SUM(p.price * li.quantity) AS total_price
    FROM orders o
    JOIN line_items li ON o.order_id = li.order_id
    JOIN products p ON li.product_id = p.product_id
    GROUP BY o.order_id
    ORDER BY o.order_id
    LIMIT 5;
    '''

    # Execute the query
    cursor.execute(query)

    # Fetch and display the results
    results = cursor.fetchall()
    for row in results:
        print(f"Order ID: {row[0]}, Total Price: ${row[1]:.2f}")

    # Close the connection
    conn.close()

if __name__ == '__main__':
    fetch_order_totals()


# Task 2: Understanding Subqueries

import sqlite3

def fetch_customer_avg_orders():
    # Connect to the SQLite database
    conn = sqlite3.connect('../db/lesson.db')
    cursor = conn.cursor()

    # Define the SQL query
    query = '''
    SELECT c.customer_name, 
           AVG(order_totals.total_price) AS average_total_price
    FROM customers c
    LEFT JOIN (
    SELECT o.customer_id AS customer_id_b,
            SUM(p.price * li.quantity) AS total_price
        FROM orders o
        JOIN line_items li ON o.order_id = li.order_id
        JOIN products p ON li.product_id = p.product_id
        GROUP BY o.order_id
   ) AS order_totals ON c.customer_id = order_totals.customer_id_b
    GROUP BY c.customer_id;
    '''

    # Execute the query
    cursor.execute(query)

    # Fetch and display the results
    results = cursor.fetchall()
    for row in results:
        if row[1] is not None:
            print(f"Customer: {row[0]}, Average Order Total: ${row[1]:.2f}")
        else:
            print(f"Customer: {row[0]}, Average Order Total: $0.00")

    # Close the connection
    conn.close()

if __name__ == '__main__':
    fetch_customer_avg_orders()

# Task 3: An Insert Transaction Based on Data

import sqlite3

def create_order_transaction():
    conn = sqlite3.connect('../db/lesson.db')
    conn.execute("PRAGMA foreign_keys = 1")
    cursor = conn.cursor()

    try:
        # 1. Get customer_id for 'Perez and Sons'
        cursor.execute("SELECT customer_id FROM customers WHERE customer_name = 'Perez and Sons'")
        customer_id = cursor.fetchone()[0]

        # 2. Get employee_id for Miranda Harris (using first_name and last_name)
        cursor.execute("SELECT employee_id FROM employees WHERE first_name = 'Miranda' AND last_name = 'Harris'")
        employee_id = cursor.fetchone()[0]

        # 3. Get the 5 least expensive products
        cursor.execute("SELECT product_id FROM products ORDER BY price ASC LIMIT 5")
        product_ids = [row[0] for row in cursor.fetchall()]

        # 4. Insert a new order and get the order_id
        cursor.execute("""
            INSERT INTO orders (customer_id, employee_id) 
            VALUES (?, ?)
            RETURNING order_id
        """, (customer_id, employee_id))
        order_id = cursor.fetchone()[0]

        # 5. Insert line items for 10 of each of the 5 products
        for product_id in product_ids:
            cursor.execute("""
                INSERT INTO line_items (order_id, product_id, quantity)
                VALUES (?, ?, ?)
            """, (order_id, product_id, 10))

        # 6. Commit the transaction
        conn.commit()
        print(f"Order {order_id} created successfully.")

        # 7. Print line items for the order with product name and quantity
        cursor.execute("""
            SELECT li.line_item_id, li.quantity, p.product_name
            FROM line_items li
            JOIN products p ON li.product_id = p.product_id
            WHERE li.order_id = ?
        """, (order_id,))
        results = cursor.fetchall()
        print(f"Line items for order {order_id}:")
        for row in results:
            print(f"  Line Item ID: {row[0]}, Quantity: {row[1]}, Product: {row[2]}")

    except Exception as e:
        print("An error occurred:", e)
        conn.rollback()

    finally:
        conn.close()

if __name__ == '__main__':
    create_order_transaction()
